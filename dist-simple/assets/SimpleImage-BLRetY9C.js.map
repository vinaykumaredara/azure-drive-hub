{"version":3,"file":"SimpleImage-BLRetY9C.js","sources":["../../src/utils/carImageUtils.ts","../../src/components/LazyImage.tsx","../../src/components/SimpleImage.tsx"],"sourcesContent":["// src/utils/carImageUtils.ts\r\n// Unified utility for resolving car image URLs consistently across the application\r\n\r\n// Cache for resolved URLs to improve performance\r\nconst urlCache = new Map<string, string>();\r\nconst imageCache = new Map<string, HTMLImageElement>();\r\n\r\n// Fallback image URL for when images fail to load\r\nconst FALLBACK_IMAGE = 'https://images.unsplash.com/photo-1494905998402-395d579af36f?w=800&h=600&fit=crop&crop=center&auto=format&q=80';\r\n\r\n/**\r\n * Preload an image and cache it for better performance\r\n * @param src - Image source URL\r\n * @returns Promise that resolves when image is loaded\r\n */\r\nexport function preloadImage(src: string): Promise<HTMLImageElement> {\r\n  // Check if already cached\r\n  if (imageCache.has(src)) {\r\n    return Promise.resolve(imageCache.get(src)!);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      imageCache.set(src, img);\r\n      resolve(img);\r\n    };\r\n    img.onerror = reject;\r\n    img.src = src;\r\n  });\r\n}\r\n\r\n/**\r\n * Resolve a car image URL from either a storage path or a full URL\r\n * @param imagePath - Storage path or full URL\r\n * @returns Resolved public URL or fallback image\r\n */\r\nexport function resolveCarImageUrl(path: string | null | undefined): string {\r\n  // Handle null/undefined/empty cases\r\n  if (!path || typeof path !== 'string' || path.trim() === '') {\r\n    return FALLBACK_IMAGE;\r\n  }\r\n  \r\n  // Check cache first\r\n  if (urlCache.has(path)) {\r\n    return urlCache.get(path)!;\r\n  }\r\n  \r\n  let result: string;\r\n  \r\n  // If it's already a full HTTP URL, return it as-is\r\n  if (path.startsWith('http://') || path.startsWith('https://')) {\r\n    result = path;\r\n  } else {\r\n    // For storage paths, construct the public URL\r\n    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || 'https://rcpkhtlvfvafympulywx.supabase.co';\r\n    result = `${supabaseUrl}/storage/v1/object/public/cars-photos/${path}`;\r\n  }\r\n  \r\n  // Cache the result\r\n  urlCache.set(path, result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Resolve all image URLs for a car\r\n * @param car - Car object with image_urls array\r\n * @returns Car object with resolved image URLs\r\n */\r\nexport function resolveCarImageUrls(car: any): any {\r\n  if (!car) {\r\n    return car;\r\n  }\r\n  \r\n  // If we have image_paths, resolve them\r\n  if (Array.isArray(car.image_paths) && car.image_paths.length > 0) {\r\n    car.image_urls = car.image_paths.map(resolveCarImageUrl);\r\n    return car;\r\n  }\r\n  \r\n  // If we already have image_urls, resolve them to ensure they are full URLs\r\n  if (Array.isArray(car.image_urls) && car.image_urls.length > 0) {\r\n    car.image_urls = car.image_urls.map(resolveCarImageUrl);\r\n    return car;\r\n  }\r\n  \r\n  // Fallback: ensure we have at least one fallback image\r\n  car.image_urls = [FALLBACK_IMAGE];\r\n  return car;\r\n}\r\n\r\n/**\r\n * Standardize car data for display by ensuring consistent image properties\r\n * @param car The car object to standardize\r\n * @returns Car object with standardized image properties\r\n */\r\nexport function standardizeCarImageData(car: any) {\r\n  if (!car) {\r\n    return car;\r\n  }\r\n\r\n  // Ensure we have proper arrays for image_paths and image_urls\r\n  const image_paths: string[] = (Array.isArray(car?.image_paths) && car.image_paths.length > 0) \r\n    ? car.image_paths \r\n    : [];\r\n    \r\n  const image_urls: string[] = (Array.isArray(car?.image_urls) && car.image_urls.length > 0) \r\n    ? car.image_urls.map(resolveCarImageUrl)\r\n    : (image_paths.length > 0 ? image_paths.map(resolveCarImageUrl) : []);\r\n  \r\n  // Ensure we have valid images array\r\n  const images = (Array.isArray(image_urls) && image_urls.length > 0) \r\n    ? image_urls \r\n    : [FALLBACK_IMAGE];\r\n    \r\n  // Ensure we have a valid thumbnail\r\n  const thumbnail = (typeof images[0] === 'string' && images[0].length > 0) \r\n    ? images[0] \r\n    : FALLBACK_IMAGE;\r\n  \r\n  return { ...car, image_paths, image_urls, images, thumbnail };\r\n}\r\n\r\n/**\r\n * Validate if an image URL is accessible\r\n * @param url - Image URL to validate\r\n * @returns Promise that resolves to true if URL is accessible, false otherwise\r\n */\r\nexport async function validateImageUrl(url: string): Promise<boolean> {\r\n  if (!url || typeof url !== 'string' || url.trim() === '') {\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    const response = await fetch(url, { method: 'HEAD' });\r\n    return response.ok;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Map car data from database to UI format\r\n * @param car The car object from database\r\n * @returns Car object formatted for UI display\r\n */\r\nexport function mapCarForUI(car: any): any {\r\n  // wrapper mapping used across UI components\r\n  return standardizeCarImageData(car);\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { resolveCarImageUrl, preloadImage } from '@/utils/carImageUtils';\r\n\r\ntype Props = React.ImgHTMLAttributes<HTMLImageElement> & {\r\n  placeholder?: string; // small LQIP if available\r\n  aspectRatio?: string; // e.g., \"4/3\", \"16/9\", \"1/1\"\r\n  fallback?: string; // custom fallback image URL\r\n  debug?: boolean; // Add debug prop\r\n  lazy?: boolean; // Enable lazy loading\r\n};\r\n\r\n// Default fallback image\r\nconst FALLBACK_IMAGE = 'https://images.unsplash.com/photo-1494905998402-395d579af36f?w=800&h=600&fit=crop&crop=center&auto=format&q=80';\r\n\r\nexport default function LazyImage({ \r\n  src, \r\n  alt, \r\n  placeholder: _placeholder,\r\n  aspectRatio, \r\n  fallback,\r\n  className = '',\r\n  debug = false,\r\n  lazy = true,\r\n  ...rest \r\n}: Props) {\r\n  const [error, setError] = useState(false);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [isVisible, setIsVisible] = useState(!lazy);\r\n  const imgRef = useRef<HTMLImageElement>(null);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n\r\n  // Resolve URL synchronously\r\n  const resolvedSrc = resolveCarImageUrl(src);\r\n  \r\n  // Log for debugging\r\n  useEffect(() => {\r\n    if (debug) {\r\n      console.log(\"LazyImage - Props:\", { src, alt, resolvedSrc });\r\n    }\r\n  }, [src, alt, resolvedSrc, debug]);\r\n\r\n  // Setup intersection observer for lazy loading\r\n  useEffect(() => {\r\n    if (!lazy || !imgRef.current) {return;}\r\n\r\n    // Create intersection observer\r\n    observerRef.current = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setIsVisible(true);\r\n          observerRef.current?.disconnect();\r\n        }\r\n      },\r\n      {\r\n        rootMargin: '50px', // Load images when they're 50px away from viewport\r\n        threshold: 0.01\r\n      }\r\n    );\r\n\r\n    // Observe the image element\r\n    if (imgRef.current) {\r\n      observerRef.current.observe(imgRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (observerRef.current) {\r\n        observerRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [lazy]);\r\n\r\n  // Preload image when it becomes visible\r\n  useEffect(() => {\r\n    if (!isVisible || !resolvedSrc) {return;}\r\n\r\n    let isMounted = true;\r\n    \r\n    preloadImage(resolvedSrc)\r\n      .then(() => {\r\n        if (isMounted) {\r\n          setLoaded(true);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        if (isMounted) {\r\n          setError(true);\r\n        }\r\n      });\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [isVisible, resolvedSrc]);\r\n\r\n  // Aspect ratio container styles\r\n  const containerStyle: React.CSSProperties = {\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n    ...(aspectRatio ? {\r\n      aspectRatio: aspectRatio,\r\n    } : {\r\n      width: '100%',\r\n      height: 'auto',\r\n    })\r\n  };\r\n\r\n  // Handle image load error\r\n  const handleError = () => {\r\n    if (debug) {\r\n      console.log('Image failed to load', resolvedSrc);\r\n    }\r\n    setError(true);\r\n  };\r\n\r\n  // Determine which image to display\r\n  const displaySrc = error || !resolvedSrc ? (fallback || FALLBACK_IMAGE) : resolvedSrc;\r\n\r\n  // Show placeholder while loading\r\n  if (!loaded && isVisible) {\r\n    return (\r\n      <div style={containerStyle} className=\"bg-gray-100\">\r\n        <img\r\n          ref={imgRef}\r\n          src={displaySrc}\r\n          alt={alt}\r\n          onError={handleError}\r\n          onLoad={() => setLoaded(true)}\r\n          className={`${className} block w-full h-full object-cover ${!loaded ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`}\r\n          {...rest}\r\n        />\r\n        \r\n        {debug && resolvedSrc && (\r\n          <div className=\"text-xs p-1 bg-gray-100 break-all\">\r\n            {resolvedSrc}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={containerStyle} className=\"bg-gray-100\">\r\n      <img\r\n        ref={imgRef}\r\n        src={displaySrc}\r\n        alt={alt}\r\n        onError={handleError}\r\n        className={`${className} block w-full h-full object-cover ${loaded ? 'opacity-100' : 'opacity-0'} transition-opacity duration-300`}\r\n        {...rest}\r\n      />\r\n      \r\n      {debug && resolvedSrc && (\r\n        <div className=\"text-xs p-1 bg-gray-100 break-all\">\r\n          {resolvedSrc}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","import { ImgHTMLAttributes } from 'react';\r\nimport LazyImage from '@/components/LazyImage';\r\n\r\ninterface SimpleImageProps extends ImgHTMLAttributes<HTMLImageElement> {\r\n  src: string;\r\n  alt: string;\r\n  className?: string;\r\n  lazy?: boolean;\r\n}\r\n\r\nconst FALLBACK_IMAGE = 'https://images.unsplash.com/photo-1494905998402-395d579af36f?w=800&h=600&fit=crop&crop=center&auto=format&q=80';\r\n\r\nexport default function SimpleImage({ \r\n  src, \r\n  alt, \r\n  className = '',\r\n  lazy = true,\r\n  ...rest \r\n}: SimpleImageProps) {\r\n  return (\r\n    <LazyImage\r\n      src={src}\r\n      alt={alt}\r\n      className={className}\r\n      lazy={lazy}\r\n      fallback={FALLBACK_IMAGE}\r\n      {...rest}\r\n    />\r\n  );\r\n}"],"names":["urlCache","imageCache","FALLBACK_IMAGE","preloadImage","src","resolve","reject","img","resolveCarImageUrl","path","result","standardizeCarImageData","car","image_paths","image_urls","images","thumbnail","mapCarForUI","LazyImage","alt","_placeholder","aspectRatio","fallback","className","debug","lazy","rest","error","setError","useState","loaded","setLoaded","isVisible","setIsVisible","imgRef","useRef","observerRef","resolvedSrc","useEffect","entry","isMounted","containerStyle","handleError","displaySrc","jsxs","jsx","SimpleImage"],"mappings":"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"}