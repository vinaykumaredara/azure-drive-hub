{"version":3,"file":"useRealtime-Cu8CyKs1.js","sources":["../../src/hooks/useRealtime.ts"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { RealtimeChannel } from '@supabase/supabase-js';\r\n\r\n// Define the type for Supabase realtime payload\r\ninterface SupabaseRealtimePayload<T> {\r\n  commit_timestamp: string;\r\n  errors: string[] | null;\r\n  eventType: string;\r\n  id: number;\r\n  new: T;\r\n  old: T;\r\n  schema: string;\r\n  table: string;\r\n}\r\n\r\nexport function useRealtimeSubscription<T = any>(\r\n  table: string,\r\n  onInsert?: (payload: SupabaseRealtimePayload<T>) => void,\r\n  onUpdate?: (payload: SupabaseRealtimePayload<T>) => void,\r\n  onDelete?: (payload: SupabaseRealtimePayload<T>) => void,\r\n  filter?: string\r\n) {\r\n  useEffect(() => {\r\n    let channel: RealtimeChannel;\r\n\r\n    const setupChannel = () => {\r\n      channel = supabase.channel(`${table}-changes`);\r\n\r\n      if (onInsert) {\r\n        channel.on(\r\n          'postgres_changes',\r\n          {\r\n            event: 'INSERT',\r\n            schema: 'public',\r\n            table,\r\n          },\r\n          (payload) => {\r\n            onInsert(payload as unknown as SupabaseRealtimePayload<T>);\r\n          }\r\n        );\r\n      }\r\n\r\n      if (onUpdate) {\r\n        channel.on(\r\n          'postgres_changes',\r\n          {\r\n            event: 'UPDATE',\r\n            schema: 'public',\r\n            table,\r\n          },\r\n          (payload) => {\r\n            onUpdate(payload as unknown as SupabaseRealtimePayload<T>);\r\n          }\r\n        );\r\n      }\r\n\r\n      if (onDelete) {\r\n        channel.on(\r\n          'postgres_changes',\r\n          {\r\n            event: 'DELETE',\r\n            schema: 'public',\r\n            table,\r\n          },\r\n          (payload) => {\r\n            onDelete(payload as unknown as SupabaseRealtimePayload<T>);\r\n          }\r\n        );\r\n      }\r\n\r\n      channel.subscribe();\r\n    };\r\n\r\n    setupChannel();\r\n\r\n    return () => {\r\n      if (channel) {\r\n        supabase.removeChannel(channel);\r\n      }\r\n    };\r\n  }, [table, onInsert, onUpdate, onDelete, filter]);\r\n}\r\n\r\nexport function useRealtimePresence(\r\n  channelName: string,\r\n  userState: any,\r\n  onSync?: (state: any) => void,\r\n  onJoin?: (key: string, newPresences: any) => void,\r\n  onLeave?: (key: string, leftPresences: any) => void\r\n) {\r\n  useEffect(() => {\r\n    const channel = supabase.channel(channelName);\r\n\r\n    if (onSync) {\r\n      channel.on('presence', { event: 'sync' }, () => {\r\n        const newState = channel.presenceState();\r\n        onSync(newState);\r\n      });\r\n    }\r\n\r\n    if (onJoin) {\r\n      channel.on('presence', { event: 'join' }, ({ key, newPresences }) => {\r\n        onJoin(key, newPresences);\r\n      });\r\n    }\r\n\r\n    if (onLeave) {\r\n      channel.on('presence', { event: 'leave' }, ({ key, leftPresences }) => {\r\n        onLeave(key, leftPresences);\r\n      });\r\n    }\r\n\r\n    channel.subscribe(async (status) => {\r\n      if (status === 'SUBSCRIBED') {\r\n        await channel.track(userState);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [channelName, userState, onSync, onJoin, onLeave]);\r\n}"],"names":["useRealtimeSubscription","table","onInsert","onUpdate","onDelete","filter","useEffect","channel","supabase","payload"],"mappings":"0CAgBO,SAASA,EACdC,EACAC,EACAC,EACAC,EACAC,EACA,CACAC,EAAAA,UAAU,IAAM,CACd,IAAIC,EAkDJ,OAhDqB,IAAM,CACzBA,EAAUC,EAAS,QAAQ,GAAGP,CAAK,UAAU,EAEzCC,GACFK,EAAQ,GACN,mBACA,CACE,MAAO,SACP,OAAQ,SACR,MAAAN,CAAA,EAEDQ,GAAY,CACXP,EAASO,CAAgD,CAC3D,CAAA,EAIAN,GACFI,EAAQ,GACN,mBACA,CACE,MAAO,SACP,OAAQ,SACR,MAAAN,CAAA,EAEDQ,GAAY,CACXN,EAASM,CAAgD,CAC3D,CAAA,EAIAL,GACFG,EAAQ,GACN,mBACA,CACE,MAAO,SACP,OAAQ,SACR,MAAAN,CAAA,EAEDQ,GAAY,CACXL,EAASK,CAAgD,CAC3D,CAAA,EAIJF,EAAQ,UAAA,CACV,GAEA,EAEO,IAAM,CACPA,GACFC,EAAS,cAAcD,CAAO,CAElC,CACF,EAAG,CAACN,EAAOC,EAAUC,EAAUC,EAAUC,CAAM,CAAC,CAClD"}