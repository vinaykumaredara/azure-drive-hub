{"version":3,"mappings":"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","names":["Filter","createLucideIcon","mapCarForUI","car","standardizeCarImageData","FALLBACK_IMAGE","uploadImageFile","file","carId","timestamp","uuid","fileExt","fileName","uploadError","supabase","data","publicUrl","uploadMultipleImageFiles","files","uploadedFiles","uploadedPaths","uploadedFile","f","error","removeImagesFromStorageByPaths","filePaths","validPaths","path","err","createCarWithImages","carData","imageFiles","uploadedImagePaths","uploadedImageUrls","paths","urls","carDataWithImages","updateCarWithImages","newImageFiles","removeOldImages","imagesToRemove","oldImagePaths","pathsToRemove","currentCar","fetchError","currentImageUrls","currentImagePaths","urlsToKeep","url","pathsToKeep","index","finalImageUrls","finalImagePaths","deleteCarWithImages","deleteError","AdminCarManagement","fileInputRef","useRef","cars","setCars","useState","filteredCars","setFilteredCars","isLoading","setIsLoading","selectedCar","setSelectedCar","isEditDialogOpen","setIsEditDialogOpen","uploadingImages","setUploadingImages","isDeleteDialogOpen","setIsDeleteDialogOpen","carToDelete","setCarToDelete","uploadedImageFiles","setUploadedImageFiles","uploadedImagePreviews","setUploadedImagePreviews","setImagesToRemove","searchTerm","setSearchTerm","statusFilter","setStatusFilter","fuelFilter","setFuelFilter","transmissionFilter","setTransmissionFilter","formData","setFormData","useEffect","fetchCars","filtered","useRealtimeSubscription","payload","prev","carsWithMappedImages","toast","handleImageUpload","fileArray","i","previews","resetForm","handleEdit","handleDelete","supabaseUrl","serverDeleteSuccess","functionUrl","response","result","errorText","serverError","__vitePreload","imageCrudUtils","clientError","c","handleSubmit","e","carStatus","priceInPaise","toPaise","updatedCar","newCar","removeUploadedImage","newFiles","newPreviews","toggleImageToRemove","imageUrl","getStatusBadge","status","Badge","jsx","jsxs","Button","Plus","Card","CardHeader","CardTitle","CardContent","Label","Input","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","motion","ImageCarousel","formatINRFromPaise","Edit","Trash2","Car","Dialog","DialogContent","DialogHeader","DialogTitle","value","Textarea","SimpleImage","Upload","preview"],"ignoreList":[0],"sources":["../../node_modules/lucide-react/dist/esm/icons/filter.js","../../src/utils/adminImageUtils.ts","../../src/utils/imageCrudUtils.ts","../../src/components/AdminCarManagement.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Filter = createLucideIcon(\"Filter\", [\n  [\"polygon\", { points: \"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\", key: \"1yg77f\" }]\n]);\n\nexport { Filter as default };\n//# sourceMappingURL=filter.js.map\n","// src/utils/adminImageUtils.ts\r\nimport { resolveCarImageUrls, standardizeCarImageData } from '@/utils/carImageUtils';\r\n\r\n/**\r\n * Resolve image URLs for a car in admin context\r\n * Ensures all images have valid public URLs\r\n * @param car The car object to resolve images for\r\n * @returns The car object with resolved image URLs\r\n */\r\nexport async function resolveImageUrlsForCarAdmin(car: any) {\r\n  // Use our unified resolver for consistency\r\n  const result = await resolveCarImageUrls(car);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Map car data from database to UI format for admin\r\n * @param car The car object from database\r\n * @returns Car object formatted for UI display\r\n */\r\nexport function mapCarForUI(car: any): any {\r\n  if (!car) {\r\n    return car;\r\n  }\r\n\r\n  // Use the standardized image data function\r\n  return standardizeCarImageData(car);\r\n}\r\n","// src/utils/imageCrudUtils.ts\r\n// Complete Image CRUD Reliability Utilities\r\n\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\n// Fallback image URL\r\nconst FALLBACK_IMAGE = 'https://images.unsplash.com/photo-1494905998402-395d579af36f?w=800&h=600&fit=crop&crop=center&auto=format&q=80';\r\n\r\n/**\r\n * Upload a single image file to Supabase Storage\r\n * @param file The image file to upload\r\n * @param carId The ID of the car (used for folder organization)\r\n * @returns Object containing the file path and public URL\r\n */\r\nexport async function uploadImageFile(file: File, carId: string) {\r\n  // Validate file type\r\n  if (!file.type.startsWith('image/')) {\r\n    throw new Error(`File ${file.name} is not a valid image.`);\r\n  }\r\n\r\n  // Generate unique file name with deterministic pattern\r\n  const timestamp = Date.now();\r\n  const uuid = crypto.randomUUID();\r\n  const fileExt = file.name.split('.').pop() || 'jpg';\r\n  const fileName = `cars/${carId}/${timestamp}_${uuid}.${fileExt}`;\r\n  \r\n  // Upload file to storage with cache control\r\n  const { error: uploadError } = await supabase.storage\r\n    .from('cars-photos')\r\n    .upload(fileName, file, {\r\n      cacheControl: 'public, max-age=31536000, immutable'\r\n    });\r\n\r\n  if (uploadError) {\r\n    throw uploadError;\r\n  }\r\n\r\n  // Get public URL for the uploaded file\r\n  const { data } = supabase.storage.from('cars-photos').getPublicUrl(fileName);\r\n  const publicUrl = data?.publicUrl;\r\n  \r\n  if (!publicUrl) {\r\n    // If we can't generate a public URL, remove the uploaded file and throw error\r\n    await supabase.storage.from('cars-photos').remove([fileName]);\r\n    throw new Error('Failed to generate public URL for uploaded image');\r\n  }\r\n\r\n  return {\r\n    path: fileName,\r\n    url: publicUrl\r\n  };\r\n}\r\n\r\n/**\r\n * Upload multiple image files to Supabase Storage\r\n * @param files Array of image files to upload\r\n * @param carId The ID of the car (used for folder organization)\r\n * @returns Object containing arrays of file paths and public URLs\r\n */\r\nexport async function uploadMultipleImageFiles(files: File[], carId: string) {\r\n  const uploadedFiles: { path: string; url: string }[] = [];\r\n  const uploadedPaths: string[] = [];\r\n\r\n  try {\r\n    // Upload files one by one to ensure atomicity\r\n    for (const file of files) {\r\n      const uploadedFile = await uploadImageFile(file, carId);\r\n      uploadedFiles.push(uploadedFile);\r\n      uploadedPaths.push(uploadedFile.path);\r\n    }\r\n\r\n    return {\r\n      paths: uploadedFiles.map(f => f.path),\r\n      urls: uploadedFiles.map(f => f.url)\r\n    };\r\n  } catch (error) {\r\n    // Rollback all previously uploaded files\r\n    if (uploadedPaths.length > 0) {\r\n      await supabase.storage.from('cars-photos').remove(uploadedPaths);\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Remove images from Supabase Storage\r\n * @param imageUrls Array of image URLs or paths to remove\r\n * @returns Promise that resolves when all images are removed\r\n */\r\nexport async function removeImagesFromStorage(imageUrls: string[] | null | undefined) {\r\n  if (!Array.isArray(imageUrls) || imageUrls.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // Filter out any null/undefined/empty values\r\n  const validUrls = imageUrls.filter(url => url && typeof url === 'string' && url.length > 0);\r\n  \r\n  if (validUrls.length === 0) {\r\n    return;\r\n  }\r\n\r\n  // Extract file paths from URLs (if they're full URLs)\r\n  const filePaths = validUrls.map(url => {\r\n    // If it's already a path (not a full URL), use it as is\r\n    if (!url.startsWith('http')) {\r\n      return url;\r\n    }\r\n    \r\n    // Extract path from Supabase public URL\r\n    // Example: https://xxx.supabase.co/storage/v1/object/public/cars-photos/cars/123/image.jpg\r\n    // Should extract: cars/123/image.jpg\r\n    try {\r\n      const urlObj = new URL(url);\r\n      const pathParts = urlObj.pathname.split('/');\r\n      const bucketIndex = pathParts.indexOf('cars-photos');\r\n      if (bucketIndex !== -1 && bucketIndex < pathParts.length - 1) {\r\n        return pathParts.slice(bucketIndex + 1).join('/');\r\n      }\r\n      return url; // Fallback to original if we can't parse\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    } catch (_err) {\r\n      return url; // Fallback to original if URL parsing fails\r\n    }\r\n  });\r\n\r\n  try {\r\n    const { error } = await supabase.storage\r\n      .from('cars-photos')\r\n      .remove(filePaths);\r\n    \r\n    if (error) {\r\n      console.warn('Warning: Some images could not be removed from storage:', error);\r\n      // Don't throw error as this shouldn't break the main flow\r\n    }\r\n  } catch (_err) {\r\n    console.warn('Warning: Error removing images from storage:', _err);\r\n    // Don't throw error as this shouldn't break the main flow\r\n  }\r\n}\r\n\r\n/**\r\n * Remove images from Supabase Storage using file paths\r\n * @param filePaths Array of file paths to remove\r\n * @returns Promise that resolves when all images are removed\r\n */\r\nexport async function removeImagesFromStorageByPaths(filePaths: string[] | null | undefined) {\r\n  if (!Array.isArray(filePaths) || filePaths.length === 0) {\r\n    console.log('[IMAGE-CRUD] No file paths provided for removal');\r\n    return;\r\n  }\r\n\r\n  // Filter out any null/undefined/empty values\r\n  const validPaths = filePaths.filter(path => path && typeof path === 'string' && path.length > 0);\r\n  \r\n  if (validPaths.length === 0) {\r\n    console.log('[IMAGE-CRUD] No valid file paths to remove');\r\n    return;\r\n  }\r\n\r\n  console.log(`[IMAGE-CRUD] Attempting to remove ${validPaths.length} images from storage`);\r\n\r\n  try {\r\n    const { error } = await supabase.storage\r\n      .from('cars-photos')\r\n      .remove(validPaths);\r\n    \r\n    if (error) {\r\n      console.warn('[IMAGE-CRUD] Warning: Some images could not be removed from storage:', error);\r\n      // Don't throw error as this shouldn't break the main flow\r\n    } else {\r\n      console.log(`[IMAGE-CRUD] Successfully removed ${validPaths.length} images from storage`);\r\n    }\r\n  } catch (err) {\r\n    console.warn('[IMAGE-CRUD] Warning: Error removing images from storage:', err);\r\n    // Don't throw error as this shouldn't break the main flow\r\n  }\r\n}\r\n\r\n/**\r\n * Create a new car with images\r\n * @param carData The car data to insert\r\n * @param imageFiles Array of image files to upload\r\n * @returns The created car object\r\n */\r\nexport async function createCarWithImages(carData: any, imageFiles: File[]) {\r\n  let uploadedImagePaths: string[] = [];\r\n  let uploadedImageUrls: string[] = [];\r\n\r\n  try {\r\n    // Upload images first\r\n    if (imageFiles && imageFiles.length > 0) {\r\n      const { paths, urls } = await uploadMultipleImageFiles(imageFiles, `new-${Date.now()}`);\r\n      uploadedImagePaths = paths;\r\n      uploadedImageUrls = urls;\r\n    }\r\n\r\n    // Add image URLs and paths to car data\r\n    const carDataWithImages = {\r\n      ...carData,\r\n      image_urls: uploadedImageUrls.length > 0 ? uploadedImageUrls : [FALLBACK_IMAGE],\r\n      image_paths: uploadedImagePaths.length > 0 ? uploadedImagePaths : null,\r\n      status: carData.status || 'published'\r\n    };\r\n\r\n    // Insert car into database - using explicit typing workaround\r\n    const { data, error } = await (supabase.from('cars') as any)\r\n      .insert([carDataWithImages])\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      // If database insert fails, remove uploaded images\r\n      if (uploadedImagePaths.length > 0) {\r\n        await removeImagesFromStorageByPaths(uploadedImagePaths);\r\n      }\r\n      throw error;\r\n    }\r\n\r\n    // Update the car ID in the uploaded file paths for better organization\r\n    if (uploadedImagePaths.length > 0 && data?.id) {\r\n      // We could potentially rename the files here, but it's not necessary\r\n      // The important thing is that the database has the correct URLs\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    // If any step fails, clean up uploaded images\r\n    if (uploadedImagePaths.length > 0) {\r\n      await removeImagesFromStorageByPaths(uploadedImagePaths);\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Update an existing car with new images\r\n * @param carId The ID of the car to update\r\n * @param carData The car data to update\r\n * @param newImageFiles Array of new image files to upload\r\n * @param removeOldImages Whether to remove old images from storage (default: false for appending)\r\n * @param imagesToRemove Array of specific image URLs to remove (optional)\r\n * @returns The updated car object\r\n */\r\nexport async function updateCarWithImages(\r\n  carId: string, \r\n  carData: any, \r\n  newImageFiles: File[], \r\n  removeOldImages: boolean = false, // Changed default to false to append images\r\n  imagesToRemove: string[] = [] // New parameter for specific image removal\r\n) {\r\n  let uploadedImagePaths: string[] = [];\r\n  let uploadedImageUrls: string[] = [];\r\n  let oldImagePaths: string[] = [];\r\n  let pathsToRemove: string[] = [];\r\n\r\n  try {\r\n    // Get the current car to preserve existing data\r\n    const { data: currentCar, error: fetchError } = await (supabase.from('cars') as any)\r\n      .select('image_urls, image_paths')\r\n      .eq('id', carId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      throw fetchError;\r\n    }\r\n\r\n    // Handle specific image removal\r\n    let currentImageUrls = currentCar?.image_urls && Array.isArray(currentCar.image_urls) ? [...currentCar.image_urls] : [];\r\n    let currentImagePaths = currentCar?.image_paths && Array.isArray(currentCar.image_paths) ? [...currentCar.image_paths] : [];\r\n    \r\n    if (imagesToRemove.length > 0) {\r\n      // Filter out images that should be removed\r\n      const urlsToKeep = currentImageUrls.filter(url => !imagesToRemove.includes(url));\r\n      const pathsToKeep = currentImagePaths.filter((path, index) => {\r\n        // Only keep paths that correspond to URLs we're keeping\r\n        return urlsToKeep.includes(currentImageUrls[index]);\r\n      });\r\n      \r\n      currentImageUrls = urlsToKeep;\r\n      currentImagePaths = pathsToKeep;\r\n      \r\n      // Collect paths to remove for storage cleanup\r\n      pathsToRemove = currentImagePaths.filter((path, index) => {\r\n        return imagesToRemove.includes(currentImageUrls[index]);\r\n      });\r\n    }\r\n\r\n    // Store old image paths for potential cleanup (only if removing all old images)\r\n    if (currentCar?.image_paths && Array.isArray(currentCar.image_paths) && removeOldImages) {\r\n      oldImagePaths = [...currentCar.image_paths];\r\n    }\r\n\r\n    // Upload new images\r\n    if (newImageFiles && newImageFiles.length > 0) {\r\n      const { paths, urls } = await uploadMultipleImageFiles(newImageFiles, carId);\r\n      uploadedImagePaths = paths;\r\n      uploadedImageUrls = urls;\r\n    }\r\n\r\n    // Prepare image URLs and paths for the update\r\n    let finalImageUrls: string[] | null;\r\n    let finalImagePaths: string[] | null;\r\n    \r\n    if (uploadedImageUrls.length > 0 || imagesToRemove.length > 0) {\r\n      // Combine existing images (after removal) with new images\r\n      finalImageUrls = [...currentImageUrls, ...uploadedImageUrls];\r\n      finalImagePaths = [...currentImagePaths, ...uploadedImagePaths];\r\n    } else if (currentImageUrls.length > 0) {\r\n      // Keep existing images if no new ones uploaded and no removals\r\n      finalImageUrls = currentImageUrls;\r\n      finalImagePaths = currentImagePaths;\r\n    } else {\r\n      // No images\r\n      finalImageUrls = null;\r\n      finalImagePaths = null;\r\n    }\r\n\r\n    // Prepare car data for update\r\n    const carDataWithImages = {\r\n      ...carData,\r\n      image_urls: finalImageUrls,\r\n      image_paths: finalImagePaths\r\n    };\r\n\r\n    // Update car in database - using explicit typing workaround\r\n    const { data, error } = await (supabase.from('cars') as any)\r\n      .update(carDataWithImages)\r\n      .eq('id', carId)\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      // If database update fails, remove newly uploaded images\r\n      if (uploadedImagePaths.length > 0) {\r\n        await removeImagesFromStorageByPaths(uploadedImagePaths);\r\n      }\r\n      throw error;\r\n    }\r\n\r\n    // Remove old images from storage if requested (complete replacement)\r\n    if (removeOldImages && oldImagePaths.length > 0) {\r\n      await removeImagesFromStorageByPaths(oldImagePaths);\r\n    }\r\n    \r\n    // Remove specific images from storage if requested\r\n    if (pathsToRemove.length > 0) {\r\n      await removeImagesFromStorageByPaths(pathsToRemove);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    // If any step fails, clean up newly uploaded images\r\n    if (uploadedImagePaths.length > 0) {\r\n      await removeImagesFromStorageByPaths(uploadedImagePaths);\r\n    }\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Delete a car and all its associated images\r\n * @param carId The ID of the car to delete\r\n * @returns Promise that resolves when the car and images are deleted\r\n */\r\nexport async function deleteCarWithImages(carId: string) {\r\n  // Get the car to retrieve image paths\r\n  const { data: car, error: fetchError } = await (supabase.from('cars') as any)\r\n    .select('image_paths')\r\n    .eq('id', carId)\r\n    .single();\r\n\r\n  if (fetchError && fetchError.code !== 'PGRST116') { // PGRST116 means no rows returned\r\n    throw fetchError;\r\n  }\r\n\r\n  // Remove images from storage first using paths for reliability\r\n  if (car?.image_paths && Array.isArray(car.image_paths) && car.image_paths.length > 0) {\r\n    await removeImagesFromStorageByPaths(car.image_paths);\r\n  }\r\n\r\n  // Delete the car record from database\r\n  const { error: deleteError } = await supabase\r\n    .from('cars')\r\n    .delete()\r\n    .eq('id', carId);\r\n\r\n  if (deleteError) {\r\n    throw deleteError;\r\n  }\r\n\r\n  return { success: true };\r\n}\r\n\r\n/**\r\n * Verify storage and database alignment for a car\r\n * @param carId The ID of the car to verify\r\n * @returns Object containing verification results\r\n */\r\nexport async function verifyCarImageAlignment(carId: string) {\r\n  try {\r\n    // Get car data\r\n    const { data: car, error: fetchError } = await (supabase.from('cars') as any)\r\n      .select('image_urls')\r\n      .eq('id', carId)\r\n      .single();\r\n\r\n    if (fetchError) {\r\n      return {\r\n        carId,\r\n        error: 'Failed to fetch car data',\r\n        details: fetchError\r\n      };\r\n    }\r\n\r\n    if (!car) {\r\n      return {\r\n        carId,\r\n        error: 'Car not found'\r\n      };\r\n    }\r\n\r\n    // Check each image URL\r\n    const verificationResults = [];\r\n    const imageUrls = (car.image_urls && Array.isArray(car.image_urls)) ? car.image_urls : [];\r\n    \r\n    for (const url of imageUrls) {\r\n      try {\r\n        // Skip fallback images\r\n        if (url === FALLBACK_IMAGE) {\r\n          verificationResults.push({\r\n            url,\r\n            status: 'fallback',\r\n            accessible: true\r\n          });\r\n          continue;\r\n        }\r\n\r\n        // Test if URL is accessible\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), 5000);\r\n        \r\n        const response = await fetch(url, { \r\n          method: 'HEAD', \r\n          signal: controller.signal \r\n        });\r\n        \r\n        clearTimeout(timeoutId);\r\n        \r\n        verificationResults.push({\r\n          url,\r\n          status: response.ok ? 'accessible' : 'inaccessible',\r\n          accessible: response.ok,\r\n          statusCode: response.status\r\n        });\r\n      } catch (err) {\r\n        verificationResults.push({\r\n          url,\r\n          status: 'error',\r\n          accessible: false,\r\n          error: (err as Error).message || 'Unknown error'\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      carId,\r\n      imageUrls: imageUrls,\r\n      verificationResults,\r\n      allAccessible: verificationResults.every(r => r.accessible)\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      carId,\r\n      error: 'Verification failed',\r\n      details: error\r\n    };\r\n  }\r\n}","import { useState, useEffect, useRef } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { Plus, Edit, Trash2, Upload, Car, Filter } from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { toast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useRealtimeSubscription } from '@/hooks/useRealtime';\r\nimport { formatINRFromPaise, toPaise } from '@/utils/currency';\r\nimport SimpleImage from '@/components/SimpleImage';\r\nimport { mapCarForUI } from '@/utils/adminImageUtils';\r\nimport ImageCarousel from '@/components/ImageCarousel';\r\n// Import the new image CRUD utilities\r\nimport { \r\n  createCarWithImages, \r\n  updateCarWithImages\r\n} from '@/utils/imageCrudUtils';\r\n\r\ninterface Car {\r\n  id: string;\r\n  title: string;\r\n  make: string;\r\n  model: string;\r\n  year: number;\r\n  seats: number;\r\n  fuel_type: string;\r\n  transmission: string;\r\n  price_per_day: number;\r\n  price_per_hour?: number;\r\n  service_charge?: number;\r\n  description?: string;\r\n  location_city?: string;\r\n  status: string;\r\n  image_urls: string[] | null; // Make it explicitly nullable\r\n  created_at: string;\r\n  price_in_paise?: number;\r\n  currency?: string;\r\n  // New fields for atomic booking\r\n  booking_status?: string;\r\n  booked_by?: string;\r\n  booked_at?: string;\r\n}\r\n\r\nconst AdminCarManagement: React.FC = () => {\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const [cars, setCars] = useState<Car[]>([]);\r\n  const [filteredCars, setFilteredCars] = useState<Car[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedCar, setSelectedCar] = useState<Car | null>(null);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [uploadingImages, setUploadingImages] = useState(false);\r\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\r\n  const [carToDelete, setCarToDelete] = useState<Car | null>(null);\r\n  const [uploadedImageFiles, setUploadedImageFiles] = useState<File[]>([]);\r\n  const [uploadedImagePreviews, setUploadedImagePreviews] = useState<string[]>([]);\r\n  const [imagesToRemove, setImagesToRemove] = useState<string[]>([]);\r\n  \r\n  // Search and filter states\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [fuelFilter, setFuelFilter] = useState('all');\r\n  const [transmissionFilter, setTransmissionFilter] = useState('all');\r\n\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    make: '',\r\n    model: '',\r\n    year: new Date().getFullYear(),\r\n    seats: 5,\r\n    fuel_type: 'petrol',\r\n    transmission: 'automatic',\r\n    price_per_day: 0,\r\n    price_per_hour: 0,\r\n    service_charge: 0,\r\n    description: '',\r\n    location_city: '',\r\n    status: 'published'\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchCars();\r\n  }, []);\r\n  \r\n  // Filter cars based on search and filter criteria\r\n  useEffect(() => {\r\n    let filtered = cars;\r\n    \r\n    // Search filter\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(car => \r\n        car.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        car.make.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        car.model.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        car.location_city?.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // Status filter\r\n    if (statusFilter !== 'all') {\r\n      filtered = filtered.filter(car => car.status === statusFilter);\r\n    }\r\n    \r\n    // Fuel filter\r\n    if (fuelFilter !== 'all') {\r\n      filtered = filtered.filter(car => car.fuel_type === fuelFilter);\r\n    }\r\n    \r\n    // Transmission filter\r\n    if (transmissionFilter !== 'all') {\r\n      filtered = filtered.filter(car => car.transmission === transmissionFilter);\r\n    }\r\n    \r\n    setFilteredCars(filtered);\r\n  }, [cars, searchTerm, statusFilter, fuelFilter, transmissionFilter]);\r\n\r\n  // Real-time subscription for cars\r\n  useRealtimeSubscription<Car>(\r\n    'cars',\r\n    (payload: { new: Car }) => {\r\n      setCars(prev => [...prev, payload.new]);\r\n    },\r\n    (payload: { new: Car }) => {\r\n      setCars(prev => prev.map(car => \r\n        car.id === payload.new.id ? payload.new : car\r\n      ));\r\n    },\r\n    (payload: { old: Car }) => {\r\n      setCars(prev => prev.filter(car => car.id !== payload.old.id));\r\n    }\r\n  );\r\n\r\n  const fetchCars = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('cars')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {throw error;}\r\n      \r\n      // Debug logging\r\n      console.info('Admin: Fetched cars from DB', {\r\n        count: data?.length,\r\n        sampleCar: data?.[0] ? {\r\n          id: (data[0] as any).id,\r\n          title: (data[0] as any).title,\r\n          image_urls: (data[0] as any).image_urls,\r\n          envUrl: import.meta.env.VITE_SUPABASE_URL || ''\r\n        } : null\r\n      });\r\n      \r\n      // Log all car image data for debugging\r\n      data?.forEach((car: any) => {\r\n        console.log('Admin Car Data:', {\r\n          id: car.id,\r\n          title: car.title,\r\n          image_urls: car.image_urls,\r\n          image_paths: car.image_paths,\r\n          image_urls_type: typeof car.image_urls,\r\n          image_paths_type: typeof car.image_paths,\r\n          image_urls_length: Array.isArray(car.image_urls) ? car.image_urls.length : 'Not an array',\r\n          image_paths_length: Array.isArray(car.image_paths) ? car.image_paths.length : 'Not an array'\r\n        });\r\n      });\r\n      \r\n      // Map car data for UI using the new utility function\r\n      const carsWithMappedImages = (data || []).map((car: any) => mapCarForUI(car));\r\n      \r\n      // Log mapped images for debugging\r\n      carsWithMappedImages.forEach((car: any) => {\r\n        console.log('Mapped Car Images:', {\r\n          id: car.id,\r\n          title: car.title,\r\n          images: car.images,\r\n          thumbnail: car.thumbnail,\r\n          images_type: typeof car.images,\r\n          images_length: Array.isArray(car.images) ? car.images.length : 'Not an array'\r\n        });\r\n      });\r\n      \r\n      setCars(carsWithMappedImages as Car[]);\r\n      setFilteredCars(carsWithMappedImages as Car[]);\r\n    } catch (error) {\r\n      console.error('Error fetching cars:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load cars\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async (files: File[] | FileList) => {\r\n    setUploadingImages(true);\r\n\r\n    try {\r\n      // Convert FileList to File[] if needed\r\n      const fileArray = Array.isArray(files) ? files : Array.from(files);\r\n      \r\n      // Validate that all files are images\r\n      for (let i = 0; i < fileArray.length; i++) {\r\n        const file = fileArray[i];\r\n        if (!file.type.startsWith('image/')) {\r\n          throw new Error(`File ${file.name} is not a valid image. Please upload only image files (JPEG, PNG, GIF, etc.).`);\r\n        }\r\n      }\r\n\r\n      // Generate previews for the uploaded files\r\n      const previews = fileArray.map(file => URL.createObjectURL(file));\r\n      \r\n      // Update state with new files and previews\r\n      setUploadedImageFiles(prev => [...prev, ...fileArray]);\r\n      setUploadedImagePreviews(prev => [...prev, ...previews]);\r\n      \r\n    } catch (error: any) {\r\n      console.error('Error uploading images:', error);\r\n      toast({\r\n        title: \"Upload Error\",\r\n        description: error.message || \"Failed to upload images\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setUploadingImages(false);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      title: '',\r\n      make: '',\r\n      model: '',\r\n      year: new Date().getFullYear(),\r\n      seats: 5,\r\n      fuel_type: 'petrol',\r\n      transmission: 'automatic',\r\n      price_per_day: 0,\r\n      price_per_hour: 0,\r\n      service_charge: 0,\r\n      description: '',\r\n      location_city: '',\r\n      status: 'published'\r\n    });\r\n    setSelectedCar(null);\r\n    setUploadedImageFiles([]);\r\n    setUploadedImagePreviews([]);\r\n    setImagesToRemove([]); // Reset images to remove\r\n    \r\n    // Clean up object URLs\r\n    uploadedImagePreviews.forEach(url => URL.revokeObjectURL(url));\r\n  };\r\n\r\n  const handleEdit = (car: Car) => {\r\n    setSelectedCar(car);\r\n    setFormData({\r\n      title: car.title,\r\n      make: car.make || '',\r\n      model: car.model || '',\r\n      year: car.year || new Date().getFullYear(),\r\n      seats: car.seats || 5,\r\n      fuel_type: car.fuel_type || 'petrol',\r\n      transmission: car.transmission || 'automatic',\r\n      price_per_day: car.price_per_day || 0,\r\n      price_per_hour: car.price_per_hour || 0,\r\n      service_charge: car.service_charge || 0,\r\n      description: car.description || '',\r\n      location_city: car.location_city || '',\r\n      status: car.status || 'published'\r\n    });\r\n    // Reset uploaded images when editing\r\n    setUploadedImageFiles([]);\r\n    setUploadedImagePreviews([]);\r\n    setImagesToRemove([]); // Reset images to remove\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    if (!carToDelete) {return;}\r\n\r\n    try {\r\n      // First try server-side deletion endpoint\r\n      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || '';\r\n      let serverDeleteSuccess = false;\r\n      \r\n      if (supabaseUrl) {\r\n        try {\r\n          // Construct the correct Edge Function URL\r\n          const functionUrl = `${supabaseUrl.replace('.co', '-functions.supabase.co')}/delete-car`;\r\n          \r\n          // Get current session\r\n          const { data } = await supabase.auth.getSession();\r\n          \r\n          const response = await fetch(functionUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${data?.session?.access_token || ''}`\r\n            },\r\n            body: JSON.stringify({ carId: carToDelete.id })\r\n          });\r\n\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            console.log('Server-side deletion result:', result);\r\n            serverDeleteSuccess = true;\r\n            \r\n            // Show success message\r\n            toast({\r\n              title: \"Success\",\r\n              description: \"Car deleted successfully from database and storage\",\r\n            });\r\n          } else {\r\n            const errorText = await response.text();\r\n            console.warn('Server-side deletion failed:', response.status, errorText);\r\n            \r\n            // Don't return here, try client-side deletion as fallback\r\n            toast({\r\n              title: \"Warning\",\r\n              description: `Server deletion failed, trying client-side deletion...`,\r\n              variant: \"default\",\r\n            });\r\n          }\r\n        } catch (serverError) {\r\n          console.warn('Server-side deletion error:', serverError);\r\n          // Continue to client-side deletion\r\n        }\r\n      }\r\n\r\n      // Fallback to client-side deletion if server deletion failed\r\n      if (!serverDeleteSuccess) {\r\n        try {\r\n          // Import the client-side deletion utility\r\n          const { deleteCarWithImages } = await import('@/utils/imageCrudUtils');\r\n          await deleteCarWithImages(carToDelete.id);\r\n          \r\n          toast({\r\n            title: \"Success\",\r\n            description: \"Car deleted successfully using client-side method\",\r\n          });\r\n        } catch (clientError: any) {\r\n          console.error('Client-side deletion failed:', clientError);\r\n          throw new Error(`Failed to delete car using both methods: ${clientError.message || 'Unknown error'}`);\r\n        }\r\n      }\r\n\r\n      // Update local state (remove from UI)\r\n      setCars(prev => prev.filter(c => c.id !== carToDelete.id));\r\n      setFilteredCars(prev => prev.filter(c => c.id !== carToDelete.id));\r\n      \r\n      setIsDeleteDialogOpen(false);\r\n      setCarToDelete(null);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error deleting car:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: `Failed to delete car: ${error.message || 'Unknown error'}`,\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    try {\r\n      // Ensure status is always 'published' for new cars\r\n      const carStatus = selectedCar ? formData.status : 'published';\r\n      \r\n      // Convert price to paise for INR storage\r\n      const priceInPaise = toPaise(formData.price_per_day);\r\n      \r\n      // Prepare car data\r\n      const carData = {\r\n        title: formData.title,\r\n        make: formData.make,\r\n        model: formData.model,\r\n        year: formData.year,\r\n        seats: formData.seats,\r\n        fuel_type: formData.fuel_type,\r\n        transmission: formData.transmission,\r\n        price_per_day: formData.price_per_day,\r\n        price_per_hour: formData.price_per_hour || 0,\r\n        service_charge: formData.service_charge || 0,\r\n        description: formData.description || '',\r\n        location_city: formData.location_city || '',\r\n        status: carStatus,\r\n        price_in_paise: priceInPaise,\r\n        currency: 'INR' // Defensive fallback - ensure currency is always present\r\n      };\r\n\r\n      setUploadingImages(true);\r\n\r\n      if (selectedCar) {\r\n        // Update existing car - append new images and remove selected ones\r\n        const updatedCar = await updateCarWithImages(\r\n          selectedCar.id,\r\n          carData,\r\n          uploadedImageFiles,\r\n          false, // Don't remove all old images\r\n          imagesToRemove // Remove specific images selected by admin\r\n        );\r\n        \r\n        console.log('Car updated successfully:', updatedCar);\r\n      } else {\r\n        // Create new car\r\n        const newCar = await createCarWithImages(carData, uploadedImageFiles);\r\n        console.log('Car created successfully:', newCar);\r\n      }\r\n\r\n      // Success - reset form and refresh\r\n      setIsEditDialogOpen(false);\r\n      resetForm();\r\n      fetchCars();\r\n      \r\n      toast({\r\n        title: \"Success\",\r\n        description: selectedCar ? \"Car updated successfully\" : \"Car created successfully\",\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error saving car:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: `Failed to save car: ${error.message || 'Unknown error'}`,\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setUploadingImages(false);\r\n    }\r\n  };\r\n\r\n  const removeUploadedImage = (index: number) => {\r\n    const newFiles = [...uploadedImageFiles];\r\n    const newPreviews = [...uploadedImagePreviews];\r\n    \r\n    // Clean up object URL\r\n    URL.revokeObjectURL(newPreviews[index]);\r\n    \r\n    newFiles.splice(index, 1);\r\n    newPreviews.splice(index, 1);\r\n    \r\n    setUploadedImageFiles(newFiles);\r\n    setUploadedImagePreviews(newPreviews);\r\n  };\r\n\r\n  const toggleImageToRemove = (imageUrl: string) => {\r\n    setImagesToRemove(prev => {\r\n      if (prev.includes(imageUrl)) {\r\n        return prev.filter(url => url !== imageUrl);\r\n      } else {\r\n        return [...prev, imageUrl];\r\n      }\r\n    });\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'published':\r\n        return <Badge variant=\"default\">Published</Badge>;\r\n      case 'draft':\r\n        return <Badge variant=\"secondary\">Draft</Badge>;\r\n      case 'maintenance':\r\n        return <Badge variant=\"outline\">Maintenance</Badge>;\r\n      default:\r\n        return <Badge variant=\"default\">{status}</Badge>;\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"w-8 h-8 rounded-full border-4 border-primary border-t-transparent animate-spin\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto py-8\">\r\n      <div className=\"flex items-center justify-between mb-8\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold text-foreground\">Car Management</h1>\r\n          <p className=\"text-muted-foreground\">Manage your car inventory</p>\r\n        </div>\r\n        <Button onClick={() => setIsEditDialogOpen(true)}>\r\n          <Plus className=\"w-4 h-4 mr-2\" />\r\n          Add Car\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <Card className=\"mb-8\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center\">\r\n            <Filter className=\"w-5 h-5 mr-2\" />\r\n            Filters\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"search\">Search</Label>\r\n              <Input\r\n                id=\"search\"\r\n                placeholder=\"Search by title, make, model...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"status\">Status</Label>\r\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select status\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\r\n                  <SelectItem value=\"published\">Published</SelectItem>\r\n                  <SelectItem value=\"draft\">Draft</SelectItem>\r\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"fuel\">Fuel Type</Label>\r\n              <Select value={fuelFilter} onValueChange={setFuelFilter}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select fuel type\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Fuel Types</SelectItem>\r\n                  <SelectItem value=\"petrol\">Petrol</SelectItem>\r\n                  <SelectItem value=\"diesel\">Diesel</SelectItem>\r\n                  <SelectItem value=\"electric\">Electric</SelectItem>\r\n                  <SelectItem value=\"cng\">CNG</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"transmission\">Transmission</Label>\r\n              <Select value={transmissionFilter} onValueChange={setTransmissionFilter}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Select transmission\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">All Transmissions</SelectItem>\r\n                  <SelectItem value=\"manual\">Manual</SelectItem>\r\n                  <SelectItem value=\"automatic\">Automatic</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Car List */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\r\n        {filteredCars.map((car) => (\r\n          <motion.div\r\n            key={car.id}\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.3 }}\r\n          >\r\n            <Card className=\"overflow-hidden hover:shadow-lg transition-shadow\">\r\n              <div className=\"relative\">\r\n                {/* Use ImageCarousel for consistent image display */}\r\n                <ImageCarousel \r\n                  images={car.image_urls && car.image_urls.length > 0 ? car.image_urls : undefined} \r\n                  className=\"h-48\" \r\n                />\r\n                <div className=\"absolute top-2 right-2\">\r\n                  {getStatusBadge(car.status)}\r\n                </div>\r\n              </div>\r\n              <CardContent className=\"p-4\">\r\n                <h3 className=\"font-semibold text-lg mb-1\">{car.title}</h3>\r\n                <p className=\"text-muted-foreground text-sm mb-2\">\r\n                  {car.make} {car.model} ({car.year})\r\n                </p>\r\n                <div className=\"flex justify-between items-center mb-3\">\r\n                  <span className=\"font-bold text-primary\">\r\n                    {formatINRFromPaise(car.price_in_paise || toPaise(car.price_per_day))}\r\n                  </span>\r\n                  <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\r\n                    <span>{car.seats} seats</span>\r\n                    <span>•</span>\r\n                    <span className=\"capitalize\">{car.fuel_type}</span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex justify-between\">\r\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => handleEdit(car)}>\r\n                    <Edit className=\"w-4 h-4 mr-2\" />\r\n                    Edit\r\n                  </Button>\r\n                  <Button \r\n                    variant=\"outline\" \r\n                    size=\"sm\" \r\n                    onClick={() => {\r\n                      setCarToDelete(car);\r\n                      setIsDeleteDialogOpen(true);\r\n                    }}\r\n                  >\r\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n\r\n      {filteredCars.length === 0 && (\r\n        <div className=\"text-center py-12\">\r\n          <Car className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\r\n          <h3 className=\"text-xl font-semibold mb-2\">No cars found</h3>\r\n          <p className=\"text-muted-foreground mb-4\">\r\n            {searchTerm || statusFilter !== 'all' || fuelFilter !== 'all' || transmissionFilter !== 'all'\r\n              ? 'Try adjusting your filters'\r\n              : 'Get started by adding a new car'}\r\n          </p>\r\n          {!searchTerm && statusFilter === 'all' && fuelFilter === 'all' && transmissionFilter === 'all' && (\r\n            <Button onClick={() => setIsEditDialogOpen(true)}>\r\n              <Plus className=\"w-4 h-4 mr-2\" />\r\n              Add Your First Car\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Edit Dialog */}\r\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\r\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>{selectedCar ? 'Edit Car' : 'Add New Car'}</DialogTitle>\r\n          </DialogHeader>\r\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"title\">Title *</Label>\r\n                <Input\r\n                  id=\"title\"\r\n                  value={formData.title}\r\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"make\">Make</Label>\r\n                <Input\r\n                  id=\"make\"\r\n                  value={formData.make}\r\n                  onChange={(e) => setFormData({ ...formData, make: e.target.value })}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"model\">Model</Label>\r\n                <Input\r\n                  id=\"model\"\r\n                  value={formData.model}\r\n                  onChange={(e) => setFormData({ ...formData, model: e.target.value })}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"year\">Year</Label>\r\n                <Input\r\n                  id=\"year\"\r\n                  type=\"number\"\r\n                  value={formData.year}\r\n                  onChange={(e) => setFormData({ ...formData, year: parseInt(e.target.value) || new Date().getFullYear() })}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"seats\">Seats</Label>\r\n                <Input\r\n                  id=\"seats\"\r\n                  type=\"number\"\r\n                  value={formData.seats}\r\n                  onChange={(e) => setFormData({ ...formData, seats: parseInt(e.target.value) || 5 })}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"fuel_type\">Fuel Type</Label>\r\n                <Select value={formData.fuel_type} onValueChange={(value) => setFormData({ ...formData, fuel_type: value })}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"petrol\">Petrol</SelectItem>\r\n                    <SelectItem value=\"diesel\">Diesel</SelectItem>\r\n                    <SelectItem value=\"electric\">Electric</SelectItem>\r\n                    <SelectItem value=\"cng\">CNG</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"transmission\">Transmission</Label>\r\n                <Select value={formData.transmission} onValueChange={(value) => setFormData({ ...formData, transmission: value })}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"manual\">Manual</SelectItem>\r\n                    <SelectItem value=\"automatic\">Automatic</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"status\">Status</Label>\r\n                <Select value={formData.status} onValueChange={(value) => setFormData({ ...formData, status: value })}>\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"published\">Published</SelectItem>\r\n                    <SelectItem value=\"draft\">Draft</SelectItem>\r\n                    <SelectItem value=\"maintenance\">Maintenance</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"price_per_day\">Price per Day (₹)</Label>\r\n                <Input\r\n                  id=\"price_per_day\"\r\n                  type=\"number\"\r\n                  value={formData.price_per_day}\r\n                  onChange={(e) => setFormData({ ...formData, price_per_day: parseFloat(e.target.value) || 0 })}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"price_per_hour\">Price per Hour (₹)</Label>\r\n                <Input\r\n                  id=\"price_per_hour\"\r\n                  type=\"number\"\r\n                  value={formData.price_per_hour || ''}\r\n                  onChange={(e) => setFormData({ ...formData, price_per_hour: parseFloat(e.target.value) || 0 })}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"service_charge\">Service Charge (₹)</Label>\r\n                <Input\r\n                  id=\"service_charge\"\r\n                  type=\"number\"\r\n                  value={formData.service_charge || ''}\r\n                  onChange={(e) => setFormData({ ...formData, service_charge: parseFloat(e.target.value) || 0 })}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"location_city\">Location</Label>\r\n                <Input\r\n                  id=\"location_city\"\r\n                  value={formData.location_city || ''}\r\n                  onChange={(e) => setFormData({ ...formData, location_city: e.target.value })}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"description\">Description</Label>\r\n              <Textarea\r\n                id=\"description\"\r\n                value={formData.description || ''}\r\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                rows={3}\r\n              />\r\n            </div>\r\n\r\n            {/* Image Upload Section */}\r\n            <div>\r\n              <Label>Images</Label>\r\n              <div className=\"mt-2\">\r\n                {selectedCar && selectedCar.image_urls && selectedCar.image_urls.length > 0 && (\r\n                  <div className=\"mb-4\">\r\n                    <p className=\"text-sm text-muted-foreground mb-2\">Current Images:</p>\r\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\r\n                      {selectedCar.image_urls.map((url, index) => (\r\n                        <div key={index} className=\"relative group\">\r\n                          <SimpleImage\r\n                            src={url}\r\n                            alt={`Current car image ${index + 1}`}\r\n                            className=\"w-full h-24 object-cover rounded\"\r\n                          />\r\n                          <Button\r\n                            type=\"button\"\r\n                            variant={imagesToRemove.includes(url) ? \"default\" : \"destructive\"}\r\n                            size=\"sm\"\r\n                            className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                            onClick={() => toggleImageToRemove(url)}\r\n                          >\r\n                            {imagesToRemove.includes(url) ? (\r\n                              <span className=\"text-xs\">Undo</span>\r\n                            ) : (\r\n                              <Trash2 className=\"w-3 h-3\" />\r\n                            )}\r\n                          </Button>\r\n                          {imagesToRemove.includes(url) && (\r\n                            <div className=\"absolute inset-0 bg-red-500/50 rounded flex items-center justify-center\">\r\n                              <span className=\"text-white text-xs font-bold\">REMOVE</span>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                    {imagesToRemove.length > 0 && (\r\n                      <p className=\"text-sm text-muted-foreground mt-2\">\r\n                        {imagesToRemove.length} image(s) marked for removal\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                \r\n                <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center\">\r\n                  <Upload className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\r\n                  <p className=\"text-muted-foreground mb-2\">\r\n                    {uploadingImages ? 'Uploading...' : 'Drag and drop images here, or click to select files'}\r\n                  </p>\r\n                  <p className=\"text-xs text-muted-foreground mb-4\">\r\n                    PNG, JPG, GIF up to 10MB\r\n                  </p>\r\n                  <Input\r\n                    type=\"file\"\r\n                    multiple\r\n                    accept=\"image/*\"\r\n                    onChange={(e) => {\r\n                      const files = e.target.files;\r\n                      if (files && files.length > 0) {\r\n                        handleImageUpload(files);\r\n                      }\r\n                    }}\r\n                    disabled={uploadingImages}\r\n                    className=\"hidden\"\r\n                    id=\"image-upload\"\r\n                    ref={fileInputRef}\r\n                  />\r\n                  <Label htmlFor=\"image-upload\">\r\n                    <Button asChild variant=\"outline\" disabled={uploadingImages}>\r\n                      <span>Select Images</span>\r\n                    </Button>\r\n                  </Label>\r\n                </div>\r\n                \r\n                {uploadedImagePreviews.length > 0 && (\r\n                  <div className=\"mt-4\">\r\n                    <p className=\"text-sm text-muted-foreground mb-2\">New Images:</p>\r\n                    <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\r\n                      {uploadedImagePreviews.map((preview, index) => (\r\n                        <div key={index} className=\"relative group\">\r\n                          <img\r\n                            src={preview}\r\n                            alt={`Uploaded car image ${index + 1}`}\r\n                            className=\"w-full h-24 object-cover rounded\"\r\n                          />\r\n                          <Button\r\n                            type=\"button\"\r\n                            variant=\"destructive\"\r\n                            size=\"sm\"\r\n                            className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                            onClick={() => removeUploadedImage(index)}\r\n                          >\r\n                            <Trash2 className=\"w-3 h-3\" />\r\n                          </Button>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex justify-end space-x-2\">\r\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"submit\" disabled={uploadingImages}>\r\n                {uploadingImages ? 'Saving...' : (selectedCar ? 'Update Car' : 'Add Car')}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Confirm Deletion</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"py-4\">\r\n            <p>Are you sure you want to delete <span className=\"font-semibold\">{carToDelete?.title}</span>?</p>\r\n            <p className=\"text-sm text-muted-foreground mt-2\">This action cannot be undone.</p>\r\n          </div>\r\n          <div className=\"flex justify-end space-x-2\">\r\n            <Button variant=\"outline\" onClick={() => setIsDeleteDialogOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"destructive\" onClick={handleDelete}>\r\n              Delete\r\n            </Button>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminCarManagement;"],"file":"assets/AdminCarManagement-BjtKpKsO.js"}