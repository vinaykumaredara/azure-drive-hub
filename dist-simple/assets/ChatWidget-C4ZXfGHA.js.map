{"version":3,"file":"ChatWidget-C4ZXfGHA.js","sources":["../../node_modules/lucide-react/dist/esm/icons/bot.js","../../node_modules/lucide-react/dist/esm/icons/circle-minus.js","../../node_modules/lucide-react/dist/esm/icons/send.js","../../src/components/ChatWidget.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Bot = createLucideIcon(\"Bot\", [\n  [\"path\", { d: \"M12 8V4H8\", key: \"hb8ula\" }],\n  [\"rect\", { width: \"16\", height: \"12\", x: \"4\", y: \"8\", rx: \"2\", key: \"enze0r\" }],\n  [\"path\", { d: \"M2 14h2\", key: \"vft8re\" }],\n  [\"path\", { d: \"M20 14h2\", key: \"4cs60a\" }],\n  [\"path\", { d: \"M15 13v2\", key: \"1xurst\" }],\n  [\"path\", { d: \"M9 13v2\", key: \"rq6x2g\" }]\n]);\n\nexport { Bot as default };\n//# sourceMappingURL=bot.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst CircleMinus = createLucideIcon(\"CircleMinus\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M8 12h8\", key: \"1wcyev\" }]\n]);\n\nexport { CircleMinus as default };\n//# sourceMappingURL=circle-minus.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Send = createLucideIcon(\"Send\", [\n  [\n    \"path\",\n    {\n      d: \"M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z\",\n      key: \"1ffxy3\"\n    }\n  ],\n  [\"path\", { d: \"m21.854 2.147-10.94 10.939\", key: \"12cjpa\" }]\n]);\n\nexport { Send as default };\n//# sourceMappingURL=send.js.map\n","import { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { MessageCircle, Send, X, MinusCircle, User, Bot } from \"lucide-react\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useAuth } from \"@/components/AuthProvider\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\nimport { useRealtimeSubscription } from \"@/hooks/useRealtime\";\r\n\r\ninterface Message {\r\n  id: string;\r\n  room_id: string;\r\n  sender_id: string | null;\r\n  message: string | null;\r\n  attachments?: string[] | null;\r\n  created_at: string | null;\r\n}\r\n\r\ninterface ChatWidgetProps {\r\n  roomId?: string;\r\n  title?: string;\r\n  isSupport?: boolean;\r\n}\r\n\r\nexport const ChatWidget: React.FC<ChatWidgetProps> = ({\r\n  roomId,\r\n  title = \"Chat Support\",\r\n  isSupport = false,\r\n}) => {\r\n  const { user } = useAuth();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isMinimized, setIsMinimized] = useState(false);\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Generate room ID if not provided\r\n  const currentRoomId = roomId || (isSupport ? `support:${user?.id}` : `general:${user?.id}`);\r\n\r\n  // Fetch messages\r\n  const fetchMessages = useCallback(async () => {\r\n    if (!user || !currentRoomId) {return;}\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"messages\")\r\n        .select(\"*\")\r\n        .eq(\"room_id\", currentRoomId)\r\n        .order(\"created_at\", { ascending: true });\r\n\r\n      if (error) {throw error;}\r\n      setMessages(data as Message[] || []);\r\n    } catch (error) {\r\n      console.error(\"Error fetching messages:\", error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to load messages\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  }, [user, currentRoomId]);\r\n\r\n  // Set up realtime subscription\r\n  useRealtimeSubscription(\r\n    \"messages\",\r\n    (payload) => {\r\n      if (payload.new.room_id === currentRoomId) {\r\n        setMessages(prev => [...prev, payload.new]);\r\n        \r\n        // Update unread count if chat is closed/minimized\r\n        if (!isOpen || isMinimized) {\r\n          setUnreadCount(prev => prev + 1);\r\n        }\r\n      }\r\n    },\r\n    undefined,\r\n    undefined,\r\n    `room_id=eq.${currentRoomId}`\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (user && currentRoomId) {\r\n      fetchMessages();\r\n    }\r\n  }, [user, currentRoomId, fetchMessages]);\r\n\r\n  // Auto-scroll to bottom\r\n  useEffect(() => {\r\n    if (messagesEndRef.current) {\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n\r\n  // Clear unread count when opened\r\n  useEffect(() => {\r\n    if (isOpen && !isMinimized) {\r\n      setUnreadCount(0);\r\n    }\r\n  }, [isOpen, isMinimized]);\r\n\r\n  const sendMessage = async () => {\r\n    if (!newMessage.trim() || !user || !currentRoomId) {return;}\r\n\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      const { error } = await (supabase\r\n        .from(\"messages\") as any)\r\n        .insert({\r\n          room_id: currentRoomId,\r\n          sender_id: user.id,\r\n          message: newMessage.trim(),\r\n        });\r\n\r\n      if (error) {throw error;}\r\n\r\n      setNewMessage(\"\");\r\n    } catch (error: any) {\r\n      console.error(\"Error sending message:\", error);\r\n      toast({\r\n        title: \"Failed to send message\",\r\n        description: error.message || \"Please try again\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  const formatTime = (timestamp: string | null) => {\r\n    if (!timestamp) {return \"\";}\r\n    return new Date(timestamp).toLocaleTimeString([], { \r\n      hour: '2-digit', \r\n      minute: '2-digit' \r\n    });\r\n  };\r\n\r\n  const isOwnMessage = (senderId: string | null) => senderId === user?.id;\r\n\r\n  if (!user) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Chat Toggle Button */}\r\n      {!isOpen && (\r\n        <Button\r\n          onClick={() => setIsOpen(true)}\r\n          className=\"fixed bottom-6 right-6 z-50 rounded-full w-14 h-14 shadow-lg\"\r\n          size=\"icon\"\r\n        >\r\n          <MessageCircle className=\"w-6 h-6\" />\r\n          {unreadCount > 0 && (\r\n            <Badge \r\n              className=\"absolute -top-2 -right-2 px-2 min-w-[20px] h-5 flex items-center justify-center text-xs bg-destructive text-destructive-foreground\"\r\n            >\r\n              {unreadCount > 99 ? \"99+\" : unreadCount}\r\n            </Badge>\r\n          )}\r\n        </Button>\r\n      )}\r\n\r\n      {/* Chat Window */}\r\n      {isOpen && (\r\n        <Card className={`fixed bottom-6 right-6 z-50 w-80 shadow-xl transition-all duration-200 ${\r\n          isMinimized ? \"h-16\" : \"h-96\"\r\n        }`}>\r\n          {/* Header */}\r\n          <CardHeader className=\"p-3 pb-2 flex flex-row items-center justify-between\">\r\n            <CardTitle className=\"text-sm flex items-center gap-2\">\r\n              <MessageCircle className=\"w-4 h-4\" />\r\n              {title}\r\n              {unreadCount > 0 && !isMinimized && (\r\n                <Badge variant=\"destructive\" className=\"text-xs px-1.5 py-0.5\">\r\n                  {unreadCount}\r\n                </Badge>\r\n              )}\r\n            </CardTitle>\r\n            <div className=\"flex items-center gap-1\">\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\"\r\n                className=\"h-6 w-6\"\r\n                onClick={() => setIsMinimized(!isMinimized)}\r\n              >\r\n                <MinusCircle className=\"w-4 h-4\" />\r\n              </Button>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"icon\" \r\n                className=\"h-6 w-6\"\r\n                onClick={() => setIsOpen(false)}\r\n              >\r\n                <X className=\"w-4 h-4\" />\r\n              </Button>\r\n            </div>\r\n          </CardHeader>\r\n\r\n          {!isMinimized && (\r\n            <>\r\n              {/* Messages */}\r\n              <CardContent className=\"p-3 h-64 overflow-y-auto space-y-3\">\r\n                {messages.length === 0 ? (\r\n                  <div className=\"text-center text-muted-foreground text-sm py-8\">\r\n                    <Bot className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\r\n                    <p>No messages yet</p>\r\n                    <p className=\"text-xs\">Start a conversation!</p>\r\n                  </div>\r\n                ) : (\r\n                  messages.map((message) => (\r\n                    <div\r\n                      key={message.id}\r\n                      className={`flex ${isOwnMessage(message.sender_id) ? \"justify-end\" : \"justify-start\"}`}\r\n                    >\r\n                      <div\r\n                        className={`max-w-[80%] px-3 py-2 rounded-lg text-sm ${\r\n                          isOwnMessage(message.sender_id)\r\n                            ? \"bg-primary text-primary-foreground\"\r\n                            : \"bg-muted\"\r\n                        }`}\r\n                      >\r\n                        <div className=\"flex items-center gap-1 mb-1\">\r\n                          {isOwnMessage(message.sender_id) ? (\r\n                            <User className=\"w-3 h-3\" />\r\n                          ) : (\r\n                            <Bot className=\"w-3 h-3\" />\r\n                          )}\r\n                          <span className=\"text-xs opacity-70\">\r\n                            {isOwnMessage(message.sender_id) ? \"You\" : \"Support\"}\r\n                          </span>\r\n                        </div>\r\n                        <p className=\"whitespace-pre-wrap\">{message.message}</p>\r\n                        <div className=\"text-xs opacity-60 mt-1\">\r\n                          {formatTime(message.created_at)}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n                <div ref={messagesEndRef} />\r\n              </CardContent>\r\n\r\n              {/* Input */}\r\n              <div className=\"p-3 border-t\">\r\n                <div className=\"flex gap-2\">\r\n                  <Input\r\n                    value={newMessage}\r\n                    onChange={(e) => setNewMessage(e.target.value)}\r\n                    onKeyPress={handleKeyPress}\r\n                    placeholder=\"Type a message...\"\r\n                    className=\"text-sm\"\r\n                    disabled={isLoading}\r\n                  />\r\n                  <Button\r\n                    onClick={sendMessage}\r\n                    disabled={!newMessage.trim() || isLoading}\r\n                    size=\"icon\"\r\n                    className=\"shrink-0\"\r\n                  >\r\n                    <Send className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </Card>\r\n      )}\r\n    </>\r\n  );\r\n};"],"names":["Bot","createLucideIcon","CircleMinus","Send","ChatWidget","roomId","title","isSupport","user","useAuth","isOpen","setIsOpen","useState","isMinimized","setIsMinimized","messages","setMessages","newMessage","setNewMessage","isLoading","setIsLoading","unreadCount","setUnreadCount","messagesEndRef","useRef","currentRoomId","fetchMessages","useCallback","data","error","supabase","toast","useRealtimeSubscription","payload","prev","useEffect","sendMessage","handleKeyPress","e","formatTime","timestamp","isOwnMessage","senderId","jsxs","Fragment","Button","jsx","MessageCircle","Badge","Card","CardHeader","CardTitle","MinusCircle","X","CardContent","message","User","Input"],"mappings":"sUAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,EAAMC,EAAiB,MAAO,CAClC,CAAC,OAAQ,CAAE,EAAG,YAAa,IAAK,QAAQ,CAAE,EAC1C,CAAC,OAAQ,CAAE,MAAO,KAAM,OAAQ,KAAM,EAAG,IAAK,EAAG,IAAK,GAAI,IAAK,IAAK,QAAQ,CAAE,EAC9E,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,EACxC,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAQ,CAAE,EACzC,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAQ,CAAE,EACzC,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,CAC1C,CAAC,EChBD;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMC,EAAcD,EAAiB,cAAe,CAClD,CAAC,SAAU,CAAE,GAAI,KAAM,GAAI,KAAM,EAAG,KAAM,IAAK,SAAU,EACzD,CAAC,OAAQ,CAAE,EAAG,UAAW,IAAK,QAAQ,CAAE,CAC1C,CAAC,ECZD;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAME,EAAOF,EAAiB,OAAQ,CACpC,CACE,OACA,CACE,EAAG,kIACH,IAAK,QACX,CACA,EACE,CAAC,OAAQ,CAAE,EAAG,6BAA8B,IAAK,QAAQ,CAAE,CAC7D,CAAC,ECQYG,EAAwC,CAAC,CACpD,OAAAC,EACA,MAAAC,EAAQ,eACR,UAAAC,EAAY,EACd,IAAM,CACJ,KAAM,CAAE,KAAAC,CAAA,EAASC,EAAA,EACX,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAS,EAAK,EACpC,CAACC,EAAaC,CAAc,EAAIF,EAAAA,SAAS,EAAK,EAC9C,CAACG,EAAUC,CAAW,EAAIJ,EAAAA,SAAoB,CAAA,CAAE,EAChD,CAACK,EAAYC,CAAa,EAAIN,EAAAA,SAAS,EAAE,EACzC,CAACO,EAAWC,CAAY,EAAIR,EAAAA,SAAS,EAAK,EAC1C,CAACS,EAAaC,CAAc,EAAIV,EAAAA,SAAS,CAAC,EAC1CW,EAAiBC,EAAAA,OAAuB,IAAI,EAG5CC,EAAgBpB,IAAWE,EAAY,WAAWC,GAAM,EAAE,GAAK,WAAWA,GAAM,EAAE,IAGlFkB,EAAgBC,EAAAA,YAAY,SAAY,CAC5C,GAAI,GAACnB,GAAQ,CAACiB,GAEd,GAAI,CACF,KAAM,CAAE,KAAAG,EAAM,MAAAC,GAAU,MAAMC,EAC3B,KAAK,UAAU,EACf,OAAO,GAAG,EACV,GAAG,UAAWL,CAAa,EAC3B,MAAM,aAAc,CAAE,UAAW,GAAM,EAE1C,GAAII,EAAQ,MAAMA,EAClBb,EAAYY,GAAqB,EAAE,CACrC,OAASC,EAAO,CACd,QAAQ,MAAM,2BAA4BA,CAAK,EAC/CE,EAAM,CACJ,MAAO,QACP,YAAa,0BACb,QAAS,aAAA,CACV,CACH,CACF,EAAG,CAACvB,EAAMiB,CAAa,CAAC,EAGxBO,EACE,WACCC,GAAY,CACPA,EAAQ,IAAI,UAAYR,IAC1BT,KAAoB,CAAC,GAAGkB,EAAMD,EAAQ,GAAG,CAAC,GAGtC,CAACvB,GAAUG,IACbS,EAAeY,GAAQA,EAAO,CAAC,EAGrC,EACA,OACA,OACA,cAAcT,CAAa,EAAA,EAG7BU,EAAAA,UAAU,IAAM,CACV3B,GAAQiB,GACVC,EAAA,CAEJ,EAAG,CAAClB,EAAMiB,EAAeC,CAAa,CAAC,EAGvCS,EAAAA,UAAU,IAAM,CACVZ,EAAe,SACjBA,EAAe,QAAQ,eAAe,CAAE,SAAU,SAAU,CAEhE,EAAG,CAACR,CAAQ,CAAC,EAGboB,EAAAA,UAAU,IAAM,CACVzB,GAAU,CAACG,GACbS,EAAe,CAAC,CAEpB,EAAG,CAACZ,EAAQG,CAAW,CAAC,EAExB,MAAMuB,EAAc,SAAY,CAC9B,GAAI,GAACnB,EAAW,KAAA,GAAU,CAACT,GAAQ,CAACiB,GAEpC,CAAAL,EAAa,EAAI,EAEjB,GAAI,CACF,KAAM,CAAE,MAAAS,GAAU,MAAOC,EACtB,KAAK,UAAU,EACf,OAAO,CACN,QAASL,EACT,UAAWjB,EAAK,GAChB,QAASS,EAAW,KAAA,CAAK,CAC1B,EAEH,GAAIY,EAAQ,MAAMA,EAElBX,EAAc,EAAE,CAClB,OAASW,EAAY,CACnB,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CE,EAAM,CACJ,MAAO,yBACP,YAAaF,EAAM,SAAW,mBAC9B,QAAS,aAAA,CACV,CACH,QAAA,CACET,EAAa,EAAK,CACpB,EACF,EAEMiB,EAAkBC,GAA2B,CAC7CA,EAAE,MAAQ,SAAW,CAACA,EAAE,WAC1BA,EAAE,eAAA,EACFF,EAAA,EAEJ,EAEMG,EAAcC,GACbA,EACE,IAAI,KAAKA,CAAS,EAAE,mBAAmB,CAAA,EAAI,CAChD,KAAM,UACN,OAAQ,SAAA,CACT,EAJuB,GAOpBC,EAAgBC,GAA4BA,IAAalC,GAAM,GAErE,OAAKA,EAKHmC,EAAAA,KAAAC,WAAA,CAEG,SAAA,CAAA,CAAClC,GACAiC,EAAAA,KAACE,EAAA,CACC,QAAS,IAAMlC,EAAU,EAAI,EAC7B,UAAU,+DACV,KAAK,OAEL,SAAA,CAAAmC,EAAAA,IAACC,EAAA,CAAc,UAAU,SAAA,CAAU,EAClC1B,EAAc,GACbyB,EAAAA,IAACE,EAAA,CACC,UAAU,qIAET,SAAA3B,EAAc,GAAK,MAAQA,CAAA,CAAA,CAC9B,CAAA,CAAA,EAMLX,UACEuC,EAAA,CAAK,UAAW,0EACfpC,EAAc,OAAS,MACzB,GAEE,SAAA,CAAA8B,EAAAA,KAACO,EAAA,CAAW,UAAU,sDACpB,SAAA,CAAAP,EAAAA,KAACQ,EAAA,CAAU,UAAU,kCACnB,SAAA,CAAAL,EAAAA,IAACC,EAAA,CAAc,UAAU,SAAA,CAAU,EAClCzC,EACAe,EAAc,GAAK,CAACR,GACnBiC,EAAAA,IAACE,GAAM,QAAQ,cAAc,UAAU,wBACpC,SAAA3B,CAAA,CACH,CAAA,EAEJ,EACAsB,EAAAA,KAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAG,EAAAA,IAACD,EAAA,CACC,QAAQ,QACR,KAAK,OACL,UAAU,UACV,QAAS,IAAM/B,EAAe,CAACD,CAAW,EAE1C,SAAAiC,EAAAA,IAACM,EAAA,CAAY,UAAU,SAAA,CAAU,CAAA,CAAA,EAEnCN,EAAAA,IAACD,EAAA,CACC,QAAQ,QACR,KAAK,OACL,UAAU,UACV,QAAS,IAAMlC,EAAU,EAAK,EAE9B,SAAAmC,EAAAA,IAACO,EAAA,CAAE,UAAU,SAAA,CAAU,CAAA,CAAA,CACzB,CAAA,CACF,CAAA,EACF,EAEC,CAACxC,GACA8B,EAAAA,KAAAC,EAAAA,SAAA,CAEE,SAAA,CAAAD,EAAAA,KAACW,EAAA,CAAY,UAAU,qCACpB,SAAA,CAAAvC,EAAS,SAAW,EACnB4B,EAAAA,KAAC,MAAA,CAAI,UAAU,iDACb,SAAA,CAAAG,EAAAA,IAAC9C,EAAA,CAAI,UAAU,iCAAA,CAAkC,EACjD8C,EAAAA,IAAC,KAAE,SAAA,iBAAA,CAAe,EAClBA,EAAAA,IAAC,IAAA,CAAE,UAAU,UAAU,SAAA,uBAAA,CAAqB,CAAA,CAAA,CAC9C,EAEA/B,EAAS,IAAKwC,GACZT,EAAAA,IAAC,MAAA,CAEC,UAAW,QAAQL,EAAac,EAAQ,SAAS,EAAI,cAAgB,eAAe,GAEpF,SAAAZ,EAAAA,KAAC,MAAA,CACC,UAAW,4CACTF,EAAac,EAAQ,SAAS,EAC1B,qCACA,UACN,GAEA,SAAA,CAAAZ,EAAAA,KAAC,MAAA,CAAI,UAAU,+BACZ,SAAA,CAAAF,EAAac,EAAQ,SAAS,EAC7BT,EAAAA,IAACU,EAAA,CAAK,UAAU,SAAA,CAAU,EAE1BV,EAAAA,IAAC9C,EAAA,CAAI,UAAU,SAAA,CAAU,EAE3B8C,EAAAA,IAAC,QAAK,UAAU,qBACb,WAAaS,EAAQ,SAAS,EAAI,MAAQ,SAAA,CAC7C,CAAA,EACF,EACAT,EAAAA,IAAC,IAAA,CAAE,UAAU,sBAAuB,WAAQ,QAAQ,QACnD,MAAA,CAAI,UAAU,0BACZ,SAAAP,EAAWgB,EAAQ,UAAU,CAAA,CAChC,CAAA,CAAA,CAAA,CACF,EAxBKA,EAAQ,EAAA,CA0BhB,EAEHT,EAAAA,IAAC,MAAA,CAAI,IAAKvB,CAAA,CAAgB,CAAA,EAC5B,QAGC,MAAA,CAAI,UAAU,eACb,SAAAoB,EAAAA,KAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAG,EAAAA,IAACW,EAAA,CACC,MAAOxC,EACP,SAAWqB,GAAMpB,EAAcoB,EAAE,OAAO,KAAK,EAC7C,WAAYD,EACZ,YAAY,oBACZ,UAAU,UACV,SAAUlB,CAAA,CAAA,EAEZ2B,EAAAA,IAACD,EAAA,CACC,QAAST,EACT,SAAU,CAACnB,EAAW,KAAA,GAAUE,EAChC,KAAK,OACL,UAAU,WAEV,SAAA2B,EAAAA,IAAC3C,EAAA,CAAK,UAAU,SAAA,CAAU,CAAA,CAAA,CAC5B,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,EAEJ,EAhIO,IAkIX","x_google_ignoreList":[0,1,2]}