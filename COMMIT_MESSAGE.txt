feat: Implement atomic booking functionality

This commit implements the complete atomic booking system with the following features:

Database Changes:
- Added booking_status, booked_by, booked_at columns to cars table
- Added is_admin column to users table
- Added price_in_paise and currency columns for proper currency handling
- Created indexes for better performance
- Implemented RLS policies for public and admin access
- Created book_car_atomic(uuid) SECURITY DEFINER function with row locking

Frontend Changes:
- Created AtomicBookingFlow component for the booking process
- Updated AdminCarManagement to use image-first upload pattern
- Created UserCarListing for user-facing car display with booking status
- Updated CarCard to integrate with atomic booking flow
- Updated Index page to use UserCarListing
- Updated Supabase types with new fields and RPC function

Key Features:
- Thread-safe atomic booking using FOR UPDATE locking
- Proper currency handling with paise storage
- Admin upload flow with image-first pattern
- User dashboard showing booking status
- Comprehensive audit logging
- Proper error handling and user feedback

Tests:
- Created atomic-booking.test.ts with comprehensive test suite
- Verified TypeScript compilation with no errors
- Created verification scripts

The implementation follows all requirements:
1. DB migrations with required fields
2. RLS policies for public/admin access
3. Atomic booking RPC function
4. Admin upload flow changes
5. User dashboard updates
6. Booking action implementation
7. Tests and verification